

!!! ################# :: External Functions :: ############### !!!

                      []     MAIN POINTS    []
<> Always check if there are explicit return statements, otherwise pointers will be necesary for persistancy
<> Always know what the function is supposed to return on success and on error
<> Always check that required arguments are fulfilled in their due type
<> Always check if a required argument for the function is also a function
<> All functions are assignable when calling it, regardless if assigning it is a requirement for the correct output
<> All arguments to functions are copies of the original variable including the addresses




###################################################################################################################
void funct(void arg1) {
}
>This function has no specified return type since it is VOID
>This function has no return statement
>This function's argument also does not require any specific type 


###################################################################################################################
void funct(void *arg1) {
}
>This function's type is VOID
>This function's required argument is a pointer of type VOID 
>The argument passed for calling this function must be either a 
dereferenced pointer (ptr) or the address of a regular variable (&var).
>If this function has no return type, it is necessary to use arg1 as 
a pointer in order to maintain the changes done by the function



###################################################################################################################
int funct(int *arg1, int *arg2) {
}
>If this function has no return type, it is necessary to use its arguments as 
pointers in order to maintain the changes done by the function
>Only 2 arguments of type int are acceptable and must passed as addresses (&a, &b) or deref pointers


##########################################################################################################
int *funct(int size) {
  int *mal;
  mal = (int *) malloc (sizeof (int)* size);
  return mal;
}
>The function's type is pointer to Int (int *)
>The return type of this function is the address of a pointer
>The callee being assigned the output of this function must be the address of local pointer

###########################################################################################################
qsort(int (* comp) (const void*, const void*)){

}
>The definition of this function specifies that another function is required as an argument
>The function required as argument must be have 
two const arguments and must return an int regardless of its declaration type
>To fulfill this argument requirement  you must first cast a different type on the const void arguments
then do the operation required to return an int like shown within the function bellow:

int dir (const void *a, const void *b){
const int *ptr1 = (const int*)a;
const int *ptr2 = (const int*)b;
  int val1 = *ptr1;
  int val2 = *ptr2;
}

>If the argument for qsort is requiring a string type cast instead of int then follow the bellow declaration:

#include <string.h>

int dir (const void *a, const void *b){
const char * const *ptr1 = (const char**)a;
const char * const *ptr2 = (const char**)b;
  const char *str1 = *ptr1;
  const char *str2 = *ptr2;
          return strcmp(str1, str2);
}


###########################################################################################################
