// Define a c program called progY.c

$ gcc ./progY.c
//compile progY.c

$ gdb a.out
// Open binnary in GDB



(gdb) dissas main
// Displays the assambler version of the program



Dump of assembler code for function main:
0x0000000000001149      <+0>:	endbr64	
0x000000000000114d	<+4>:	push	rbp	
0x000000000000114e	<+5>:	mov	rbp,rsp	
0x0000000000001151	<+8>:	sub	rsp,0x30	
0x0000000000001155	<+12>:	mov	DWORD PT'	[	],	di
0x0000000000001158	<+15>:	mov	QWORD PT	[	)p-Ox?	],	si
Ox000000000000115c	<+19>:	mov	DWORD PT	[	],	xl
0x0000000000001163	<+26>:	mov	DWORD PT	[	)p-0x1	],	x2
Ox000000000000116a	<+33>:	mov	DWORD PT	[	],	x3
0x0000000000001171	<+40>:	mov	DWORD PT	[	],	x4
0x0000000000001178	<+47>:	mov	DWORD	PT.	[	)p-Oxc],	5
Ox000000000000117f	<+54>:	mov	DWORD PT	[	)p-OxE],	6
0x0000000000001186	<+61>:	mov	DWORD PTi	[	0x4],	
Ox000000000000118d	<+68>:	mov	r8d,DWORD P	[ by	
0x0000000000001191	<+72>:	mov	edi,DWORD P	[	bp-u:	]
0x0000000000001194	<+75>:	mov	ecx,DWORD P	[ bp-O>	
0x0000000000001197	<+78>:	mov	edx,DWORD P	[ bp-Oâ€º	
Ox000000000000119a	<+81>:	mov	eax,DWORD P	[ bp-O>	
Ox000000000000119d	<+84>:	mov	esi,DWORD P	[	bp-O\	
Ox00000000000011a0	<+87>:	push	rsi	
Ox00000000000011a1	<+88>:	mov	esi,DWORD P	[	bj	
Ox00000000000011a4	<+91>:	push	rsi	
Ox00000000000011a5	<+92>:	mov	r9d,r8d	
)x00000000000011a8	<+95>:	mov	r8d,edi	
)x00000000000011ab	<+98>:	mov	esi,eax	
)x00000000000011ad	<+100>:	lea	rax,[rip+Ox	]	#
lx00000000000011b4	<+107>:	mov	rdi,rax	
)x00000000000011b7	<+110>:	mov	eax,0x0	
)x00000000000011bc	<+115>:	call	Ox1050 <printf@plt>	
)x00000000000011c1	<+120>:	add	rsp,Ox10	
)x00000000000011c5	<+124>:	mov	eax,0x0	
)x00000000000011ca	<+129>: 	leave		
	<+130>:	ret		

End of assembler dump.



https://www.youtube.com/watch?v=vc_9Ujkpy7I
