################# GDB debugger / DDD (Data Display debugger) ############## 
################################## Usage I ################################
$ sudo apt-get install ddd
// optional GUI interface for gdb debugger

$ gcc -g prog.c
// enable gdb debuggin upon source file prog.c

$ gdb
// run gdb

(gdb) b g1
(gdb) b g2
// set break at function g1 and function g2

(gdb) run
// run program

(gdb) bt
// view callstack by invoking "BackTrace" once the program is stoped by a break interrupt

(gdb) f1
// display frame 1 of current function upon break interrupt

(gdb) continue
// resume  execution after break interrupt

(ddd) graph display <variable name>
// displays variable within current scope when using the DDD GUI


############################# GDB debugger ###########################
################################## Usage II ################################
// Define a c program called progY.c
#include <stdio.h>
int main (int argc, char** argv)
{
int a = 1;
int b = 2;
int c = 3;
int d = 4;
int e = 5;
int f = 6;
int g = 7;
  printf ("%d %d %d %d %d %d %d\n", a, b, c, d, e, f, g);
return 0;
}



$ gcc progY.c
//compile progY.c

$ gdb a.out
// Open binnary in GDB

(gdb) dissas main
// Displays the assambler version of the program
//OutPut:
Dump of assembler code for function main:
0x0000000000001149  <+0>:	endbr64	
0x000000000000114d	<+4>:	push	rbp	
0x000000000000114e	<+5>:	mov	rbp,rsp	
0x0000000000001151	<+8>:	sub	rsp,0x30	
0x0000000000001155	<+12>:	mov	DWORD PTR	[rbp-0x24],edi
0x0000000000001158	<+15>:	mov	QWORD PTR	[rbp-0x30],rsi
Ox000000000000115c	<+19>:	mov	DWORD PTR	[rbp-0x1c],0x1
0x0000000000001163	<+26>:	mov	DWORD PTR	[rbp-0x18],0x2
Ox000000000000116a	<+33>:	mov	DWORD PTR	[rbp-0x14],0x3
0x0000000000001171	<+40>:	mov	DWORD PTR	[rbp-0x10],0x4
0x0000000000001178	<+47>:	mov	DWORD PTR	[rbp-0xc],0x5
0x000000000000117f	<+54>:	mov	DWORD PTR	[rbp-0x8],0x6
0x0000000000001186	<+61>:	mov	DWORD PTR	[rbp-0x4],0x7
Ox000000000000118d	<+68>:	mov	r8d,DWORD PTR	[rbp-0xc]	
0x0000000000001191	<+72>:	mov	edi,DWORD PTR	[rbp-0x10]
0x0000000000001194	<+75>:	mov	ecx,DWORD PTR	[rbp-0x14]	
0x0000000000001197	<+78>:	mov	edx,DWORD PTR	[rbp-0x18]	
0x000000000000119a	<+81>:	mov	eax,DWORD PTR	[rbp-0x1c]	
0x000000000000119d	<+84>:	mov	esi,DWORD PTR	[rbp-0x4]	
0x00000000000011a0	<+87>:	push	rsi	
0x00000000000011a1	<+88>:	mov	esi,DWORD PTR	[rbp-0x8]	
0x00000000000011a4	<+91>:	push	rsi	
0x00000000000011a5	<+92>:	mov	r9d,r8d	
0x00000000000011a8	<+95>:	mov	r8d,edi	
0x00000000000011ab	<+98>:	mov	esi,eax	
0x00000000000011ad	<+100>:	lea	rax,[rip+Oxe50	]	# 0x2004
0x00000000000011b4	<+107>:	mov	rdi,rax	
0x00000000000011b7	<+110>:	mov	eax,0x0	
0x00000000000011bc	<+115>:	call	Ox1050 <printf@plt>	
0x00000000000011c1	<+120>:	add	rsp,Ox10	
0x00000000000011c5	<+124>:	mov	eax,0x0	
0x00000000000011ca	<+129>: leave		
0x00000000000011cb	<+130>:	ret		
End of assembler dump.

(gdb) b *main*115
// set breakpoint before printf which is called at 115

(gdb) r
//runs the program until breakpoint

(gdb) info reg
// Display registers
// where it is expected for register rdi to be the format string
//register hex-address    value
//Output:
rax	        0x0	            0
rbx	        0x0	            0
rcx	        0x3	            3
rdx	        0x2	            2
rsi	        0x1	            1
rdi	        0x55555556004	  93824992239620
rbp	        0x7fffffffe3c0	0x7fffffffe3c0
rsp	        0x7fffffffe380	0x7fffffffe380
r8	        0x4	            4
r9	        0x5	            5
r10	        0x7ffff7fc3908	140737353890056
r11	        0x7ffff7fde680	140737354000000
r12	        0x7fffffffe4d8	140737488348376
r13	        0x555555555149	93824992235849
r14	        0x555555557dc0	93824992247232
r15	        0x7ffff7ffd040	140737354125376
rip	        0x5555555551bc	0x5555555551bc <main+115>
eflags	    0x206	          [ PF IF ]
cs	        0x33	          51
ss	        0x2b	          43
ds	        0x0	            0
es	        0x0	            0
fs	        0x0	            0
gs	        0x0	            0


(gdb) x/s 0x55555556004	
// Dislay the value stored within the variable at this address
// To examine the string at the address stored by rdi
//OutPut:
0x55555556004: "%d %d %d %d %d %d %d\n"

(gdb) x/4gx $rsp
// Display stack variables
// showing that rsp points to the value of 6 and rsp+8 is 7
//OutPut:
0x7fffffffe380: 0x000000000006  0x000000000007
0x7fffffffe390: 0x7fffffffe4d8  0x7ff1178bfbff


(gdb) c
// continue with execution

https://www.youtube.com/watch?v=vc_9Ujkpy7I
