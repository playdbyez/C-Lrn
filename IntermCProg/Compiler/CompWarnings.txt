  
  
 ########### Multiple File Compilation ######## 
  
$ gcc -c progX.c 
//creates an object file (progX.o) instead of an executable (a.out)
// object files are meant to be compiled in conjunction with other files
// usually viable when there are very many object files to be compiled together
// usually scripted for usage with the "make" command
  
  
$ gcc progX.o func.o
//linking both object files to create an executable (a.out)

$ gcc progX.c progY.c
// alternatively compiles and links both files into one executable (a.out)





################ Program Diagnosis ############

$ gcc -Wall prog.c
//enables all compiler warnings

$ gcc - Wshadow prog.c
// enables shadow file warnings

$ gcc -fsanitize=address -static-libasan prog.c
// detects memory errors and displas problem lines within prog.c

$ gcc -fprofile-arcs -ftest-coverage prog.c
// creates "Test coverage files" and enables command gcov for diagnosis
// 1.Graph:  prog.gcno
// 2.Data:   prog.gcda

$ gcov prog.c
// displays how many lines were executed and creates file "prog.c.gcov"

$ cat prog.c.gcov
//displays lines not executed by marking the lines with #####




################ Performance Profiling ############
  profiling with gprof

$gcc




################# GDB debugger / DDD (Data Display debugger) ############## 

$ sudo apt-get install ddd
// optional GUI interface for gdb debugger

$ gcc -g prog.c
// enable gdb debuggin upon source file prog.c

$ gdb
// run gdb

(gdb) b g1
(gdb) b g2
// set break at function g1 and function g2

(gdb) run
// run program

(gdb) bt
// view callstack by invoking "BackTrace" once the program is stoped by a break interrupt

(gdb) f1
// display frame 1 of current function upon break interrupt

(gdb) continue
// resume  execution after break interrupt

(ddd) graph display <variable name>
// displays variable within current scope when using the DDD GUI





########## Segmentation Fault (Core dumped) ###########
This warning indicates that the program is attemptin to read or write to a memory address 
that does not belong to the program, resulting in the overflow being redirected to the file named core


% find . - iname "core"
// the core file is a way to debug programs but its also heavy on disk


$ limit coredumpsize 0
// {revent the generation of the core file but does not prevent segmentation faults



